"""
This type stub file was generated by pyright.
"""

register = ...
@register.simple_tag
def paginator_number(cl, i): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
    """
    Generate an individual page index link in a paginated list.
    """
    ...

def pagination(cl): # -> dict[str, Any | bool | str | int | list[Any]]:
    """
    Generate the series of links to the pages in a paginated list.
    """
    ...

@register.tag(name="pagination")
def pagination_tag(parser, token): # -> InclusionAdminNode:
    ...

def result_headers(cl): # -> Generator[dict[str, Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | bool] | dict[str, Any | str | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | bool] | dict[str, Any | str | bool | int | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString], Any, None]:
    """
    Generate the list column headers.
    """
    ...

def items_for_result(cl, result, form): # -> Generator[Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString, Any, None]:
    """
    Generate the actual list of data.
    """
    ...

class ResultList(list):
    """
    Wrapper class used to return items in a list_editable changelist, annotated
    with the form object for error reporting purposes. Needed to maintain
    backwards compatibility with existing admin templates.
    """
    def __init__(self, form, *items) -> None:
        ...
    


def results(cl): # -> Generator[ResultList, Any, None]:
    ...

def result_hidden_fields(cl): # -> Generator[Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString, Any, None]:
    ...

def result_list(cl): # -> dict[str, Any | list[Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString] | list[dict[str, Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | bool] | dict[str, Any | str | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | bool] | dict[str, Any | str | bool | int | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString]] | int | list[ResultList]]:
    """
    Display the headers and data list together.
    """
    ...

@register.tag(name="result_list")
def result_list_tag(parser, token): # -> InclusionAdminNode:
    ...

def date_hierarchy(cl): # -> dict[str, bool | dict[str, Any | str] | list[dict[str, Any | str]]] | dict[str, bool | dict[str, Any] | list[dict[str, Any | str]]] | dict[str, bool | list[dict[str, Any | str]] | None] | None:
    """
    Display the date hierarchy for date drill-down functionality.
    """
    ...

@register.tag(name="date_hierarchy")
def date_hierarchy_tag(parser, token): # -> InclusionAdminNode:
    ...

def search_form(cl): # -> dict[str, Any | str]:
    """
    Display a search form for searching the list.
    """
    ...

@register.tag(name="search_form")
def search_form_tag(parser, token): # -> InclusionAdminNode:
    ...

@register.simple_tag
def admin_list_filter(cl, spec): # -> Any:
    ...

def admin_actions(context):
    """
    Track the number of times the action field has been rendered on the page,
    so we know which value to use.
    """
    ...

@register.tag(name="admin_actions")
def admin_actions_tag(parser, token): # -> InclusionAdminNode:
    ...

@register.tag(name="change_list_object_tools")
def change_list_object_tools_tag(parser, token): # -> InclusionAdminNode:
    """Display the row of change list object tools."""
    ...

