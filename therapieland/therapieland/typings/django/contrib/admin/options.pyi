"""
This type stub file was generated by pyright.
"""

import enum
from django import forms
from django.contrib.admin import helpers
from django.contrib.admin.checks import BaseModelAdminChecks, InlineModelAdminChecks, ModelAdminChecks
from django.core.paginator import Paginator
from django.forms.models import BaseInlineFormSet

IS_POPUP_VAR = ...
TO_FIELD_VAR = ...
IS_FACETS_VAR = ...
class ShowFacets(enum.Enum):
    NEVER = ...
    ALLOW = ...
    ALWAYS = ...


def get_content_type_for_model(obj): # -> Any:
    ...

def get_ul_class(radio_style): # -> Literal['radiolist', 'radiolist inline']:
    ...

class IncorrectLookupParameters(Exception):
    ...


FORMFIELD_FOR_DBFIELD_DEFAULTS = ...
csrf_protect_m = ...
class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
    """Functionality common to both ModelAdmin and InlineAdmin."""
    autocomplete_fields = ...
    raw_id_fields = ...
    fields = ...
    exclude = ...
    fieldsets = ...
    form = forms.ModelForm
    filter_vertical = ...
    filter_horizontal = ...
    radio_fields = ...
    prepopulated_fields = ...
    formfield_overrides = ...
    readonly_fields = ...
    ordering = ...
    sortable_by = ...
    view_on_site = ...
    show_full_result_count = ...
    checks_class = BaseModelAdminChecks
    def check(self, **kwargs): # -> list[Error | Any]:
        ...
    
    def __init__(self) -> None:
        ...
    
    def formfield_for_dbfield(self, db_field, request, **kwargs): # -> None:
        """
        Hook for specifying the form Field instance for a given database Field
        instance.

        If kwargs are given, they're passed to the form Field's constructor.
        """
        ...
    
    def formfield_for_choice_field(self, db_field, request, **kwargs):
        """
        Get a form Field for a database Field that has declared choices.
        """
        ...
    
    def get_field_queryset(self, db, db_field, request): # -> None:
        """
        If the ModelAdmin specifies ordering, the queryset should respect that
        ordering.  Otherwise don't specify the queryset, let the field decide
        (return None in that case).
        """
        ...
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """
        Get a form Field for a ForeignKey.
        """
        ...
    
    def formfield_for_manytomany(self, db_field, request, **kwargs): # -> None:
        """
        Get a form Field for a ManyToManyField.
        """
        ...
    
    def get_autocomplete_fields(self, request): # -> tuple[()]:
        """
        Return a list of ForeignKey and/or ManyToMany fields which should use
        an autocomplete widget.
        """
        ...
    
    def get_view_on_site_url(self, obj=...): # -> str | None:
        ...
    
    def get_empty_value_display(self): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
        """
        Return the empty_value_display set on ModelAdmin or AdminSite.
        """
        ...
    
    def get_exclude(self, request, obj=...): # -> None:
        """
        Hook for specifying exclude.
        """
        ...
    
    def get_fields(self, request, obj=...): # -> list[Any]:
        """
        Hook for specifying fields.
        """
        ...
    
    def get_fieldsets(self, request, obj=...): # -> list[tuple[None, dict[str, list[Any]]]]:
        """
        Hook for specifying fieldsets.
        """
        ...
    
    def get_inlines(self, request, obj):
        """Hook for specifying custom inlines."""
        ...
    
    def get_ordering(self, request): # -> tuple[()]:
        """
        Hook for specifying field ordering.
        """
        ...
    
    def get_readonly_fields(self, request, obj=...): # -> tuple[()]:
        """
        Hook for specifying custom readonly fields.
        """
        ...
    
    def get_prepopulated_fields(self, request, obj=...): # -> dict[Any, Any]:
        """
        Hook for specifying custom prepopulated fields.
        """
        ...
    
    def get_queryset(self, request):
        """
        Return a QuerySet of all model instances that can be edited by the
        admin site. This is used by changelist_view.
        """
        ...
    
    def get_sortable_by(self, request):
        """Hook for specifying which fields can be sorted in the changelist."""
        ...
    
    def lookup_allowed(self, lookup, value, request=...): # -> bool:
        ...
    
    def to_field_allowed(self, request, to_field): # -> bool:
        """
        Return True if the model associated with this admin should be
        allowed to be referenced by the specified field.
        """
        ...
    
    def has_add_permission(self, request):
        """
        Return True if the given request has permission to add an object.
        Can be overridden by the user in subclasses.
        """
        ...
    
    def has_change_permission(self, request, obj=...):
        """
        Return True if the given request has permission to change the given
        Django model instance, the default implementation doesn't examine the
        `obj` parameter.

        Can be overridden by the user in subclasses. In such case it should
        return True if the given request has permission to change the `obj`
        model instance. If `obj` is None, this should return True if the given
        request has permission to change *any* object of the given type.
        """
        ...
    
    def has_delete_permission(self, request, obj=...):
        """
        Return True if the given request has permission to delete the given
        Django model instance, the default implementation doesn't examine the
        `obj` parameter.

        Can be overridden by the user in subclasses. In such case it should
        return True if the given request has permission to delete the `obj`
        model instance. If `obj` is None, this should return True if the given
        request has permission to delete *any* object of the given type.
        """
        ...
    
    def has_view_permission(self, request, obj=...):
        """
        Return True if the given request has permission to view the given
        Django model instance. The default implementation doesn't examine the
        `obj` parameter.

        If overridden by the user in subclasses, it should return True if the
        given request has permission to view the `obj` model instance. If `obj`
        is None, it should return True if the request has permission to view
        any object of the given type.
        """
        ...
    
    def has_view_or_change_permission(self, request, obj=...):
        ...
    
    def has_module_permission(self, request):
        """
        Return True if the given request has any permission in the given
        app label.

        Can be overridden by the user in subclasses. In such case it should
        return True if the given request has permission to view the module on
        the admin index page and access the module's index page. Overriding it
        does not restrict access to the add, change or delete views. Use
        `ModelAdmin.has_(add|change|delete)_permission` for that.
        """
        ...
    


class ModelAdmin(BaseModelAdmin):
    """Encapsulate all admin options and functionality for a given model."""
    list_display = ...
    list_display_links = ...
    list_filter = ...
    list_select_related = ...
    list_per_page = ...
    list_max_show_all = ...
    list_editable = ...
    search_fields = ...
    search_help_text = ...
    date_hierarchy = ...
    save_as = ...
    save_as_continue = ...
    save_on_top = ...
    paginator = Paginator
    preserve_filters = ...
    show_facets = ...
    inlines = ...
    add_form_template = ...
    change_form_template = ...
    change_list_template = ...
    delete_confirmation_template = ...
    delete_selected_confirmation_template = ...
    object_history_template = ...
    popup_response_template = ...
    actions = ...
    action_form = helpers.ActionForm
    actions_on_top = ...
    actions_on_bottom = ...
    actions_selection_counter = ...
    checks_class = ModelAdminChecks
    def __init__(self, model, admin_site) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def get_inline_instances(self, request, obj=...): # -> list[Any]:
        ...
    
    def get_urls(self): # -> list[URLResolver | URLPattern]:
        ...
    
    @property
    def urls(self): # -> list[URLResolver | URLPattern]:
        ...
    
    @property
    def media(self): # -> Media:
        ...
    
    def get_model_perms(self, request): # -> dict[str, Any]:
        """
        Return a dict of all perms for this model. This dict has the keys
        ``add``, ``change``, ``delete``, and ``view`` mapping to the True/False
        for each of those actions.
        """
        ...
    
    def get_form(self, request, obj=..., change=..., **kwargs): # -> type[ModelForm]:
        """
        Return a Form class for use in the admin add view. This is used by
        add_view and change_view.
        """
        ...
    
    def get_changelist(self, request, **kwargs): # -> type[ChangeList]:
        """
        Return the ChangeList class for use on the changelist page.
        """
        ...
    
    def get_changelist_instance(self, request): # -> ChangeList:
        """
        Return a `ChangeList` instance based on `request`. May raise
        `IncorrectLookupParameters`.
        """
        ...
    
    def get_object(self, request, object_id, from_field=...): # -> None:
        """
        Return an instance matching the field and value provided, the primary
        key is used if no field is provided. Return ``None`` if no match is
        found or the object_id fails validation.
        """
        ...
    
    def get_changelist_form(self, request, **kwargs): # -> type[ModelForm]:
        """
        Return a Form class for use in the Formset on the changelist page.
        """
        ...
    
    def get_changelist_formset(self, request, **kwargs): # -> Any:
        """
        Return a FormSet class for use on the changelist page if list_editable
        is used.
        """
        ...
    
    def get_formsets_with_inlines(self, request, obj=...): # -> Generator[tuple[Any, Any], Any, None]:
        """
        Yield formsets and the corresponding inlines.
        """
        ...
    
    def get_paginator(self, request, queryset, per_page, orphans=..., allow_empty_first_page=...): # -> paginator:
        ...
    
    def log_addition(self, request, obj, message): # -> Any:
        """
        Log that an object has been successfully added.

        The default implementation creates an admin LogEntry object.
        """
        ...
    
    def log_change(self, request, obj, message): # -> Any:
        """
        Log that an object has been successfully changed.

        The default implementation creates an admin LogEntry object.
        """
        ...
    
    def log_deletion(self, request, obj, object_repr): # -> Any:
        """
        Log that an object will be deleted. Note that this method must be
        called before the deletion.

        The default implementation creates an admin LogEntry object.
        """
        ...
    
    def log_deletions(self, request, queryset): # -> list[Any] | Any:
        """
        Log that objects will be deleted. Note that this method must be called
        before the deletion.

        The default implementation creates admin LogEntry objects.
        """
        ...
    
    def action_checkbox(self, obj): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
        """
        A list_display column containing a checkbox widget.
        """
        ...
    
    def get_actions(self, request): # -> dict[Any, Any] | dict[Any, tuple[Any, Any, Any]]:
        """
        Return a dictionary mapping the names of all actions for this
        ModelAdmin to a tuple of (callable, name, description) for each action.
        """
        ...
    
    def get_action_choices(self, request, default_choices=...):
        """
        Return a list of choices for use in a form object.  Each choice is a
        tuple (name, description).
        """
        ...
    
    def get_action(self, action): # -> tuple[Callable[..., object] | Any, str | Any, Any | str] | None:
        """
        Return a given action from a parameter, which can either be a callable,
        or the name of a method on the ModelAdmin.  Return is a tuple of
        (callable, name, description).
        """
        ...
    
    def get_list_display(self, request): # -> tuple[Literal['__str__']]:
        """
        Return a sequence containing the fields to be displayed on the
        changelist.
        """
        ...
    
    def get_list_display_links(self, request, list_display): # -> tuple[()] | list[Any]:
        """
        Return a sequence containing the fields to be displayed as links
        on the changelist. The list_display parameter is the list of fields
        returned by get_list_display().
        """
        ...
    
    def get_list_filter(self, request): # -> tuple[()]:
        """
        Return a sequence containing the fields to be displayed as filters in
        the right sidebar of the changelist page.
        """
        ...
    
    def get_list_select_related(self, request): # -> bool:
        """
        Return a list of fields to add to the select_related() part of the
        changelist items query.
        """
        ...
    
    def get_search_fields(self, request): # -> tuple[()]:
        """
        Return a sequence containing the fields to be searched whenever
        somebody submits a search query.
        """
        ...
    
    def get_search_results(self, request, queryset, search_term): # -> tuple[Any, bool]:
        """
        Return a tuple containing a queryset to implement the search
        and a boolean indicating if the results may contain duplicates.
        """
        ...
    
    def get_preserved_filters(self, request): # -> str:
        """
        Return the preserved filters querystring.
        """
        ...
    
    def construct_change_message(self, request, form, formsets, add=...): # -> list[Any]:
        """
        Construct a JSON structure describing changes from a changed object.
        """
        ...
    
    def message_user(self, request, message, level=..., extra_tags=..., fail_silently=...): # -> None:
        """
        Send a message to the user. The default implementation
        posts a message using the django.contrib.messages backend.

        Exposes almost the same API as messages.add_message(), but accepts the
        positional arguments in a different order to maintain backwards
        compatibility. For convenience, it accepts the `level` argument as
        a string rather than the usual level number.
        """
        ...
    
    def save_form(self, request, form, change):
        """
        Given a ModelForm return an unsaved instance. ``change`` is True if
        the object is being changed, and False if it's being added.
        """
        ...
    
    def save_model(self, request, obj, form, change): # -> None:
        """
        Given a model instance save it to the database.
        """
        ...
    
    def delete_model(self, request, obj): # -> None:
        """
        Given a model instance delete it from the database.
        """
        ...
    
    def delete_queryset(self, request, queryset): # -> None:
        """Given a queryset, delete it from the database."""
        ...
    
    def save_formset(self, request, form, formset, change): # -> None:
        """
        Given an inline formset save it to the database.
        """
        ...
    
    def save_related(self, request, form, formsets, change): # -> None:
        """
        Given the ``HttpRequest``, the parent ``ModelForm`` instance, the
        list of inline formsets and a boolean value based on whether the
        parent is being added or changed, save the related objects to the
        database. Note that at this point save_form() and save_model() have
        already been called.
        """
        ...
    
    def render_change_form(self, request, context, add=..., change=..., form_url=..., obj=...): # -> TemplateResponse:
        ...
    
    def response_add(self, request, obj, post_url_continue=...): # -> TemplateResponse | HttpResponseRedirect:
        """
        Determine the HttpResponse for the add_view stage.
        """
        ...
    
    def response_change(self, request, obj): # -> TemplateResponse | HttpResponseRedirect:
        """
        Determine the HttpResponse for the change_view stage.
        """
        ...
    
    def response_post_save_add(self, request, obj): # -> HttpResponseRedirect:
        """
        Figure out where to redirect after the 'Save' button has been pressed
        when adding a new object.
        """
        ...
    
    def response_post_save_change(self, request, obj): # -> HttpResponseRedirect:
        """
        Figure out where to redirect after the 'Save' button has been pressed
        when editing an existing object.
        """
        ...
    
    def response_action(self, request, queryset): # -> HttpResponseBase | HttpResponseRedirect | None:
        """
        Handle an admin action. This is called if a request is POSTed to the
        changelist; it returns an HttpResponse if the action was handled, and
        None otherwise.
        """
        ...
    
    def response_delete(self, request, obj_display, obj_id): # -> TemplateResponse | HttpResponseRedirect:
        """
        Determine the HttpResponse for the delete_view stage.
        """
        ...
    
    def render_delete_form(self, request, context): # -> TemplateResponse:
        ...
    
    def get_inline_formsets(self, request, formsets, inline_instances, obj=...): # -> list[Any]:
        ...
    
    def get_changeform_initial_data(self, request): # -> dict[Any, Any]:
        """
        Get the initial form data from the request's GET params.
        """
        ...
    
    @csrf_protect_m
    def changeform_view(self, request, object_id=..., form_url=..., extra_context=...): # -> HttpResponseRedirect | TemplateResponse:
        ...
    
    def add_view(self, request, form_url=..., extra_context=...): # -> HttpResponseRedirect | TemplateResponse:
        ...
    
    def change_view(self, request, object_id, form_url=..., extra_context=...): # -> HttpResponseRedirect | TemplateResponse:
        ...
    
    @csrf_protect_m
    def changelist_view(self, request, extra_context=...):
        """
        The 'change list' admin view for this model.
        """
        ...
    
    def get_deleted_objects(self, objs, request): # -> tuple[list[Any], dict[Any, Any], set[Any], list[Any]] | tuple[list[Any], dict[Any, int], set[Any], list[str | Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString]]:
        """
        Hook for customizing the delete process for the delete view and the
        "delete selected" action.
        """
        ...
    
    @csrf_protect_m
    def delete_view(self, request, object_id, extra_context=...): # -> HttpResponseRedirect | TemplateResponse:
        ...
    
    def history_view(self, request, object_id, extra_context=...): # -> HttpResponseRedirect | TemplateResponse:
        "The 'history' admin view for this model."
        ...
    
    def get_formset_kwargs(self, request, obj, inline, prefix): # -> dict[str, Any]:
        ...
    


class InlineModelAdmin(BaseModelAdmin):
    """
    Options for inline editing of ``model`` instances.

    Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``
    from ``model`` to its parent. This is required if ``model`` has more than
    one ``ForeignKey`` to its parent.
    """
    model = ...
    fk_name = ...
    formset = BaseInlineFormSet
    extra = ...
    min_num = ...
    max_num = ...
    template = ...
    verbose_name = ...
    verbose_name_plural = ...
    can_delete = ...
    show_change_link = ...
    checks_class = InlineModelAdminChecks
    classes = ...
    def __init__(self, parent_model, admin_site) -> None:
        ...
    
    @property
    def media(self): # -> Media:
        ...
    
    def get_extra(self, request, obj=..., **kwargs): # -> int:
        """Hook for customizing the number of extra inline forms."""
        ...
    
    def get_min_num(self, request, obj=..., **kwargs): # -> None:
        """Hook for customizing the min number of inline forms."""
        ...
    
    def get_max_num(self, request, obj=..., **kwargs): # -> None:
        """Hook for customizing the max number of extra inline forms."""
        ...
    
    def get_formset(self, request, obj=..., **kwargs): # -> Any:
        """Return a BaseInlineFormSet class for use in admin add/change views."""
        class DeleteProtectedModelForm(base_model_form):
            ...
        
        
    
    def get_queryset(self, request):
        ...
    
    def has_add_permission(self, request, obj): # -> bool:
        ...
    
    def has_change_permission(self, request, obj=...): # -> bool:
        ...
    
    def has_delete_permission(self, request, obj=...): # -> bool:
        ...
    
    def has_view_permission(self, request, obj=...): # -> bool:
        ...
    


class StackedInline(InlineModelAdmin):
    template = ...


class TabularInline(InlineModelAdmin):
    template = ...


