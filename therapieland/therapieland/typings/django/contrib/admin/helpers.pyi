"""
This type stub file was generated by pyright.
"""

from django import forms
from django.utils.functional import cached_property

ACTION_CHECKBOX_NAME = ...
class ActionForm(forms.Form):
    action = ...
    select_across = ...


class AdminForm:
    def __init__(self, form, fieldsets, prepopulated_fields, readonly_fields=..., model_admin=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self): # -> Generator[Fieldset, Any, None]:
        ...
    
    @property
    def errors(self):
        ...
    
    @property
    def non_field_errors(self):
        ...
    
    @property
    def fields(self):
        ...
    
    @property
    def is_bound(self):
        ...
    
    @property
    def media(self):
        ...
    


class Fieldset:
    def __init__(self, form, name=..., readonly_fields=..., fields=..., classes=..., description=..., model_admin=...) -> None:
        ...
    
    @property
    def media(self): # -> Media:
        ...
    
    @cached_property
    def is_collapsible(self): # -> bool:
        ...
    
    def __iter__(self): # -> Generator[Fieldline, Any, None]:
        ...
    


class Fieldline:
    def __init__(self, form, field, readonly_fields=..., model_admin=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[AdminReadonlyField | AdminField, Any, None]:
        ...
    
    def errors(self): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
        ...
    


class AdminField:
    def __init__(self, form, field, is_first) -> None:
        ...
    
    def label_tag(self):
        ...
    
    def errors(self): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
        ...
    


class AdminReadonlyField:
    def __init__(self, form, field, is_first, model_admin=...) -> None:
        ...
    
    def label_tag(self): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString:
        ...
    
    def get_admin_url(self, remote_field, remote_obj): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | str:
        ...
    
    def contents(self): # -> SafeString | Any:
        ...
    


class InlineAdminFormSet:
    """
    A wrapper around an inline formset for use in the admin system.
    """
    def __init__(self, inline, formset, fieldsets, prepopulated_fields=..., readonly_fields=..., model_admin=..., has_add_permission=..., has_change_permission=..., has_delete_permission=..., has_view_permission=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[InlineAdminForm, Any, None]:
        ...
    
    def fields(self): # -> Generator[dict[str, Any | tuple[Any | str, type[str] | Callable[..., object] | Any | property | None] | str | dict[str, Any | bool] | bool] | dict[str, Any | tuple[Any | str, type[str] | Callable[..., object] | Any | property | None] | str], Any, None]:
        ...
    
    def inline_formset_data(self): # -> str:
        ...
    
    @property
    def forms(self):
        ...
    
    @cached_property
    def is_collapsible(self): # -> bool:
        ...
    
    def non_form_errors(self):
        ...
    
    @property
    def is_bound(self):
        ...
    
    @property
    def total_form_count(self):
        ...
    
    @property
    def media(self):
        ...
    


class InlineAdminForm(AdminForm):
    """
    A wrapper around an inline form for use in the admin system.
    """
    def __init__(self, formset, form, fieldsets, prepopulated_fields, original, readonly_fields=..., model_admin=..., view_on_site_url=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[InlineFieldset, Any, None]:
        ...
    
    def needs_explicit_pk_field(self): # -> bool:
        ...
    
    def pk_field(self): # -> AdminField:
        ...
    
    def fk_field(self): # -> AdminField | Literal['']:
        ...
    
    def deletion_field(self): # -> AdminField:
        ...
    


class InlineFieldset(Fieldset):
    def __init__(self, formset, *args, **kwargs) -> None:
        ...
    
    def __iter__(self): # -> Generator[Fieldline, Any, None]:
        ...
    


class AdminErrorList(forms.utils.ErrorList):
    """Store errors for the form/formsets in an add/change view."""
    def __init__(self, form, inline_formsets) -> None:
        ...
    


