"""
This type stub file was generated by pyright.
"""

"""
This encapsulates the logic for displaying filters in the Django admin.
Filters are specified in models with the "list_filter" option.

Each filter subclass knows how to display a filter for a field that passes a
certain test -- e.g. being a DateField or ForeignKey.
"""
class ListFilter:
    title = ...
    template = ...
    def __init__(self, request, params, model, model_admin) -> None:
        ...
    
    def has_output(self):
        """
        Return True if some choices would be output for this filter.
        """
        ...
    
    def choices(self, changelist):
        """
        Return choices ready to be output in the template.

        `changelist` is the ChangeList to be displayed.
        """
        ...
    
    def queryset(self, request, queryset):
        """
        Return the filtered queryset.
        """
        ...
    
    def expected_parameters(self):
        """
        Return the list of parameter names that are expected from the
        request's query string and that will be used by this filter.
        """
        ...
    


class FacetsMixin:
    def get_facet_counts(self, pk_attname, filtered_qs):
        ...
    
    def get_facet_queryset(self, changelist):
        ...
    


class SimpleListFilter(FacetsMixin, ListFilter):
    parameter_name = ...
    def __init__(self, request, params, model, model_admin) -> None:
        ...
    
    def has_output(self): # -> bool:
        ...
    
    def value(self): # -> None:
        """
        Return the value (in string format) provided in the request's
        query string for this filter, if any, or None if the value wasn't
        provided.
        """
        ...
    
    def lookups(self, request, model_admin):
        """
        Must be overridden to return a list of tuples (value, verbose value)
        """
        ...
    
    def expected_parameters(self): # -> list[None]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[Any, Any]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, bool | Any | __proxy__] | dict[str, Any | str], Any, None]:
        ...
    


class FieldListFilter(FacetsMixin, ListFilter):
    _field_list_filters = ...
    _take_priority_index = ...
    list_separator = ...
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def has_output(self): # -> Literal[True]:
        ...
    
    def queryset(self, request, queryset):
        ...
    
    @classmethod
    def register(cls, test, list_filter_class, take_priority=...): # -> None:
        ...
    
    @classmethod
    def create(cls, field, request, params, model, model_admin, field_path): # -> None:
        ...
    


class RelatedFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    @property
    def include_empty_choice(self):
        """
        Return True if a "(None)" choice should be included, which filters
        out everything except empty relationships.
        """
        ...
    
    def has_output(self): # -> bool:
        ...
    
    def expected_parameters(self): # -> list[str]:
        ...
    
    def field_admin_ordering(self, field, request, model_admin): # -> tuple[()]:
        """
        Return the model admin's ordering for related field, if provided.
        """
        ...
    
    def field_choices(self, field, request, model_admin):
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, bool | Any | __proxy__] | dict[str, bool | Any | str], Any, None]:
        ...
    


class BooleanFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def expected_parameters(self): # -> list[str]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, Any | bool | str | __proxy__] | dict[str, Any | str], Any, None]:
        ...
    


class ChoicesFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def expected_parameters(self): # -> list[str]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, bool | Any | __proxy__] | dict[str, bool | Any | str], Any, None]:
        ...
    


class DateFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def expected_parameters(self): # -> list[str]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, bool | Any | str | __proxy__], Any, None]:
        ...
    


class AllValuesFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def expected_parameters(self): # -> list[Any | str]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, bool | Any | __proxy__] | dict[str, bool | Any | str], Any, None]:
        ...
    


class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
    def field_choices(self, field, request, model_admin):
        ...
    


class EmptyFieldListFilter(FieldListFilter):
    def __init__(self, field, request, params, model, model_admin, field_path) -> None:
        ...
    
    def get_lookup_condition(self): # -> Node:
        ...
    
    def queryset(self, request, queryset):
        ...
    
    def expected_parameters(self): # -> list[str]:
        ...
    
    def get_facet_counts(self, pk_attname, filtered_qs): # -> dict[str, Count]:
        ...
    
    def choices(self, changelist): # -> Generator[dict[str, Any | str | __proxy__], Any, None]:
        ...
    


