"""
This type stub file was generated by pyright.
"""

from django.db.models.deletion import Collector

QUOTE_MAP = ...
UNQUOTE_MAP = ...
UNQUOTE_RE = ...
class FieldIsAForeignKeyColumnName(Exception):
    """A field is a foreign key attname, i.e. <FK>_id."""
    ...


def lookup_spawns_duplicates(opts, lookup_path): # -> bool:
    """
    Return True if the given lookup path spawns duplicates.
    """
    ...

def get_last_value_from_parameters(parameters, key):
    ...

def prepare_lookup_value(key, value, separator=...): # -> list[list[Any] | Any | bool] | bool:
    """
    Return a lookup value prepared to be used in queryset filtering.
    """
    ...

def build_q_object_from_lookup_parameters(parameters): # -> Q | Any:
    ...

def quote(s): # -> str:
    """
    Ensure that primary key values do not confuse the admin URLs by escaping
    any '/', '_' and ':' and similarly problematic characters.
    Similar to urllib.parse.quote(), except that the quoting is slightly
    different so that it doesn't get automatically unquoted by the web browser.
    """
    ...

def unquote(s): # -> Any:
    """Undo the effects of quote()."""
    ...

def flatten(fields): # -> list[Any]:
    """
    Return a list which is a single level of flattening of the original list.
    """
    ...

def flatten_fieldsets(fieldsets): # -> list[Any]:
    """Return a list of field names from an admin fieldsets structure."""
    ...

def get_deleted_objects(objs, request, admin_site): # -> tuple[list[Any], dict[Any, Any], set[Any], list[Any]] | tuple[list[Any], dict[Any, int], set[Any], list[str | Any | _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString]]:
    """
    Find all objects related to ``objs`` that should also be deleted. ``objs``
    must be a homogeneous iterable of objects (e.g. a QuerySet).

    Return a nested list of strings suitable for display in the
    template with the ``unordered_list`` filter.
    """
    ...

class NestedObjects(Collector):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def add_edge(self, source, target): # -> None:
        ...
    
    def collect(self, objs, source=..., source_attr=..., **kwargs): # -> None:
        ...
    
    def related_objects(self, related_model, related_fields, objs):
        ...
    
    def nested(self, format_callback=...): # -> list[Any]:
        """
        Return the graph as a nested list.
        """
        ...
    
    def can_fast_delete(self, *args, **kwargs): # -> Literal[False]:
        """
        We always want to load the objects into memory so that we can display
        them to the user in confirm page.
        """
        ...
    


def model_format_dict(obj): # -> dict[str, Any]:
    """
    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
    typically for use with string formatting.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    """
    ...

def model_ngettext(obj, n=...): # -> Any:
    """
    Return the appropriate `verbose_name` or `verbose_name_plural` value for
    `obj` depending on the count `n`.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
    `QuerySet` is used.
    """
    ...

def lookup_field(name, obj, model_admin=...): # -> tuple[None, None, None] | tuple[Any | None, Callable[..., object] | Any | object | None, Any | object]:
    ...

def label_for_field(name, model, model_admin=..., return_attr=..., form=...): # -> tuple[Any | str, type[str] | Callable[..., object] | Any | property | None] | str | Any:
    """
    Return a sensible label for a field name. The name can be a callable,
    property (but not created with @property decorator), or the name of an
    object's attribute, as well as a model field, including across related
    objects. If return_attr is True, also return the resolved attribute
    (which could be a callable). This will be None if (and only if) the name
    refers to a field.
    """
    ...

def help_text_for_field(name, model): # -> Literal['']:
    ...

def display_for_field(value, field, empty_value_display): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | str | LiteralString:
    ...

def display_for_value(value, empty_value_display, boolean=...): # -> _Wrapped[..., object, ..., Any | _Wrapped[..., Any, ..., Any] | SafeString] | SafeString | str | LiteralString:
    ...

class NotRelationField(Exception):
    ...


def get_model_from_relation(field):
    ...

def reverse_field_path(model, path): # -> tuple[Any, LiteralString]:
    """Create a reversed field path.

    E.g. Given (Order, "user__groups"),
    return (Group, "user__order").

    Final field must be a related model, not a data field.
    """
    ...

def get_fields_from_path(model, path): # -> list[Any]:
    """Return list of Fields given path relative to model.

    e.g. (ModelX, "user__groups__name") -> [
        <django.db.models.fields.related.ForeignKey object at 0x...>,
        <django.db.models.fields.related.ManyToManyField object at 0x...>,
        <django.db.models.fields.CharField object at 0x...>,
    ]
    """
    ...

def construct_change_message(form, formsets, add): # -> list[Any]:
    """
    Construct a JSON structure describing changes from a changed object.
    Translations are deactivated so that strings are stored untranslated.
    Translation happens later on LogEntry access.
    """
    ...

