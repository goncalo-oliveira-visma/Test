"""
This type stub file was generated by pyright.
"""

from django import forms

"""
Form Widget classes specific to the Django admin site.
"""
class FilteredSelectMultiple(forms.SelectMultiple):
    """
    A SelectMultiple with a JavaScript filter interface.

    Note that the resulting JavaScript assumes that the jsi18n
    catalog has been loaded in the page
    """
    class Media:
        js = ...
    
    
    def __init__(self, verbose_name, is_stacked, attrs=..., choices=...) -> None:
        ...
    
    def get_context(self, name, value, attrs): # -> dict[str, dict[str, Any | bool | str | dict[Any, Any] | None]]:
        ...
    


class BaseAdminDateWidget(forms.DateInput):
    class Media:
        js = ...
    
    
    def __init__(self, attrs=..., format=...) -> None:
        ...
    


class AdminDateWidget(BaseAdminDateWidget):
    template_name = ...


class BaseAdminTimeWidget(forms.TimeInput):
    class Media:
        js = ...
    
    
    def __init__(self, attrs=..., format=...) -> None:
        ...
    


class AdminTimeWidget(BaseAdminTimeWidget):
    template_name = ...


class AdminSplitDateTime(forms.SplitDateTimeWidget):
    """
    A SplitDateTime Widget that has some admin-specific styling.
    """
    template_name = ...
    def __init__(self, attrs=...) -> None:
        ...
    
    def get_context(self, name, value, attrs): # -> dict[str, dict[str, Any | bool | str | dict[Any, Any] | None]]:
        ...
    


class AdminRadioSelect(forms.RadioSelect):
    template_name = ...


class AdminFileWidget(forms.ClearableFileInput):
    template_name = ...


def url_params_from_lookup_dict(lookups): # -> dict[Any, Any]:
    """
    Convert the type of lookups specified in a ForeignKey limit_choices_to
    attribute to a dictionary of query parameters
    """
    ...

class ForeignKeyRawIdWidget(forms.TextInput):
    """
    A Widget for displaying ForeignKeys in the "raw_id" interface rather than
    in a <select> box.
    """
    template_name = ...
    def __init__(self, rel, admin_site, attrs=..., using=...) -> None:
        ...
    
    def get_context(self, name, value, attrs): # -> dict[str, dict[str, Any | bool | str | dict[Any, Any] | None]]:
        ...
    
    def base_url_parameters(self): # -> dict[Any, Any]:
        ...
    
    def url_parameters(self): # -> dict[Any, Any]:
        ...
    
    def label_and_url_for_value(self, value): # -> tuple[Literal[''], Literal['']] | tuple[str | Any, Any | str]:
        ...
    


class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):
    """
    A Widget for displaying ManyToMany ids in the "raw_id" interface rather than
    in a <select multiple> box.
    """
    template_name = ...
    def get_context(self, name, value, attrs): # -> dict[str, dict[str, Any | bool | str | dict[Any, Any] | None]]:
        ...
    
    def url_parameters(self): # -> dict[Any, Any]:
        ...
    
    def label_and_url_for_value(self, value): # -> tuple[Literal[''], Literal['']]:
        ...
    
    def value_from_datadict(self, data, files, name): # -> None:
        ...
    
    def format_value(self, value): # -> str:
        ...
    


class RelatedFieldWidgetWrapper(forms.Widget):
    """
    This class is a wrapper to a given widget to add the add icon for the
    admin interface.
    """
    template_name = ...
    def __init__(self, widget, rel, admin_site, can_add_related=..., can_change_related=..., can_delete_related=..., can_view_related=...) -> None:
        ...
    
    def __deepcopy__(self, memo): # -> Self:
        ...
    
    @property
    def is_hidden(self):
        ...
    
    @property
    def media(self):
        ...
    
    @property
    def choices(self):
        ...
    
    @choices.setter
    def choices(self, value): # -> None:
        ...
    
    def get_related_url(self, info, action, *args): # -> str:
        ...
    
    def get_context(self, name, value, attrs): # -> dict[str, Any | str | bool]:
        ...
    
    def value_from_datadict(self, data, files, name):
        ...
    
    def value_omitted_from_data(self, data, files, name):
        ...
    
    def id_for_label(self, id_):
        ...
    


class AdminTextareaWidget(forms.Textarea):
    def __init__(self, attrs=...) -> None:
        ...
    


class AdminTextInputWidget(forms.TextInput):
    def __init__(self, attrs=...) -> None:
        ...
    


class AdminEmailInputWidget(forms.EmailInput):
    def __init__(self, attrs=...) -> None:
        ...
    


class AdminURLFieldWidget(forms.URLInput):
    template_name = ...
    def __init__(self, attrs=..., validator_class=...) -> None:
        ...
    
    def get_context(self, name, value, attrs): # -> dict[str, dict[str, Any | bool | str | dict[Any, Any] | None]]:
        ...
    


class AdminIntegerFieldWidget(forms.NumberInput):
    class_name = ...
    def __init__(self, attrs=...) -> None:
        ...
    


class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):
    class_name = ...


class AdminUUIDInputWidget(forms.TextInput):
    def __init__(self, attrs=...) -> None:
        ...
    


SELECT2_TRANSLATIONS = ...
def get_select2_language(): # -> str | None:
    ...

class AutocompleteMixin:
    """
    Select widget mixin that loads options from AutocompleteJsonView via AJAX.

    Renders the necessary data attributes for select2 and adds the static form
    media.
    """
    url_name = ...
    def __init__(self, field, admin_site, attrs=..., choices=..., using=...) -> None:
        ...
    
    def get_url(self): # -> str:
        ...
    
    def build_attrs(self, base_attrs, extra_attrs=...):
        """
        Set select2's AJAX attributes.

        Attributes can be set using the html5 data attribute.
        Nested attributes require a double dash as per
        https://select2.org/configuration/data-attributes#nested-subkey-options
        """
        ...
    
    def optgroups(self, name, value, attr=...): # -> list[tuple[None, list[Any], Literal[0]]]:
        """Return selected options based on the ModelChoiceIterator."""
        ...
    
    @property
    def media(self): # -> Media:
        ...
    


class AutocompleteSelect(AutocompleteMixin, forms.Select):
    ...


class AutocompleteSelectMultiple(AutocompleteMixin, forms.SelectMultiple):
    ...


