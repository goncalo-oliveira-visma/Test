"""
This type stub file was generated by pyright.
"""

from django.contrib.auth.decorators import login_not_required
from django.utils.decorators import method_decorator
from django.utils.functional import LazyObject
from django.views.decorators.cache import never_cache
from django.views.decorators.common import no_append_slash

all_sites = ...
class AdminSite:
    """
    An AdminSite object encapsulates an instance of the Django admin application, ready
    to be hooked in to your URLconf. Models are registered with the AdminSite using the
    register() method, and the get_urls() method can then be used to access Django view
    functions that present a full admin interface for the collection of registered
    models.
    """
    site_title = ...
    site_header = ...
    index_title = ...
    site_url = ...
    enable_nav_sidebar = ...
    empty_value_display = ...
    login_form = ...
    index_template = ...
    app_index_template = ...
    login_template = ...
    logout_template = ...
    password_change_template = ...
    password_change_done_template = ...
    final_catch_all_view = ...
    def __init__(self, name=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def check(self, app_configs): # -> list[Any]:
        """
        Run the system checks on all ModelAdmins, except if they aren't
        customized at all.
        """
        ...
    
    def register(self, model_or_iterable, admin_class=..., **options): # -> None:
        """
        Register the given model(s) with the given admin class.

        The model(s) should be Model classes, not instances.

        If an admin class isn't given, use ModelAdmin (the default admin
        options). If keyword arguments are given -- e.g., list_display --
        apply them as options to the admin class.

        If a model is already registered, raise AlreadyRegistered.

        If a model is abstract, raise ImproperlyConfigured.
        """
        ...
    
    def unregister(self, model_or_iterable): # -> None:
        """
        Unregister the given model(s).

        If a model isn't already registered, raise NotRegistered.
        """
        ...
    
    def is_registered(self, model): # -> bool:
        """
        Check if a model class is registered with this `AdminSite`.
        """
        ...
    
    def get_model_admin(self, model):
        ...
    
    def add_action(self, action, name=...): # -> None:
        """
        Register an action to be available globally.
        """
        ...
    
    def disable_action(self, name): # -> None:
        """
        Disable a globally-registered action. Raise KeyError for invalid names.
        """
        ...
    
    def get_action(self, name): # -> Callable[..., TemplateResponse | None]:
        """
        Explicitly get a registered global action whether it's enabled or
        not. Raise KeyError for invalid names.
        """
        ...
    
    @property
    def actions(self): # -> dict_items[str, Callable[..., TemplateResponse | None]]:
        """
        Get all the enabled actions as an iterable of (name, func).
        """
        ...
    
    def has_permission(self, request):
        """
        Return True if the given HttpRequest has permission to view
        *at least one* page in the admin site.
        """
        ...
    
    def admin_view(self, view, cacheable=...): # -> _Wrapped[..., Any, ..., HttpResponseRedirect | Any]:
        """
        Decorator to create an admin view attached to this ``AdminSite``. This
        wraps the view and provides permission checking by calling
        ``self.has_permission``.

        You'll want to use this from within ``AdminSite.get_urls()``:

            class MyAdminSite(AdminSite):

                def get_urls(self):
                    from django.urls import path

                    urls = super().get_urls()
                    urls += [
                        path('my_view/', self.admin_view(some_view))
                    ]
                    return urls

        By default, admin_views are marked non-cacheable using the
        ``never_cache`` decorator. If the view can be safely cached, set
        cacheable=True.
        """
        ...
    
    def get_urls(self): # -> list[URLResolver | URLPattern]:
        ...
    
    @property
    def urls(self): # -> tuple[list[URLResolver | URLPattern], Literal['admin'], str]:
        ...
    
    def each_context(self, request): # -> dict[str, __proxy__ | Any | str | list[Any] | bool]:
        """
        Return a dictionary of variables to put in the template context for
        *every* page in the admin site.

        For sites running on a subpath, use the SCRIPT_NAME value if site_url
        hasn't been customized.
        """
        ...
    
    def password_change(self, request, extra_context=...):
        """
        Handle the "change password" task -- both form display and validation.
        """
        ...
    
    def password_change_done(self, request, extra_context=...):
        """
        Display the "success" page after a password change.
        """
        ...
    
    def i18n_javascript(self, request, extra_context=...):
        """
        Display the i18n JavaScript that the Django admin requires.

        `extra_context` is unused but present for consistency with the other
        admin views.
        """
        ...
    
    def logout(self, request, extra_context=...):
        """
        Log out the user for the given HttpRequest.

        This should *not* assume the user is already logged in.
        """
        ...
    
    @method_decorator(never_cache)
    @login_not_required
    def login(self, request, extra_context=...): # -> HttpResponseRedirect:
        """
        Display the login form for the given HttpRequest.
        """
        ...
    
    def autocomplete_view(self, request):
        ...
    
    @no_append_slash
    def catch_all_view(self, request, url): # -> HttpResponsePermanentRedirect:
        ...
    
    def get_app_list(self, request, app_label=...): # -> list[Any]:
        """
        Return a sorted list of all the installed apps that have been
        registered in this site.
        """
        ...
    
    def index(self, request, extra_context=...): # -> TemplateResponse:
        """
        Display the main admin index page, which lists all of the installed
        apps that have been registered in this site.
        """
        ...
    
    def app_index(self, request, app_label, extra_context=...): # -> TemplateResponse:
        ...
    
    def get_log_entries(self, request): # -> Any:
        ...
    


class DefaultAdminSite(LazyObject):
    def __repr__(self): # -> str:
        ...
    


site = ...
