"""
This type stub file was generated by pyright.
"""

from django import forms

ALL_VAR = ...
ORDER_VAR = ...
PAGE_VAR = ...
SEARCH_VAR = ...
ERROR_FLAG = ...
IGNORED_PARAMS = ...
class ChangeListSearchForm(forms.Form):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class ChangeList:
    search_form_class = ChangeListSearchForm
    def __init__(self, request, model, list_display, list_display_links, list_filter, date_hierarchy, search_fields, list_select_related, list_per_page, list_max_show_all, list_editable, model_admin, sortable_by, search_help_text) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def get_filters_params(self, params=...): # -> dict[Any, Any]:
        """
        Return all params except IGNORED_PARAMS.
        """
        ...
    
    def get_filters(self, request): # -> tuple[list[Any], bool, dict[Any, Any] | Any, bool, bool]:
        ...
    
    def get_query_string(self, new_params=..., remove=...): # -> str:
        ...
    
    def get_results(self, request): # -> None:
        ...
    
    def get_ordering_field(self, field_name): # -> Any | None:
        """
        Return the proper model field name corresponding to the given
        field_name to use for ordering. field_name may either be the name of a
        proper model field, possibly across relations, or the name of a method
        (on the admin or model) or a callable with the 'admin_order_field'
        attribute. Return None if no proper model field name can be matched.
        """
        ...
    
    def get_ordering(self, request, queryset):
        """
        Return the list of ordering fields for the change list.
        First check the get_ordering() method in model admin, then check
        the object's default ordering. Then, any manually-specified ordering
        from the query string overrides anything. Finally, a deterministic
        order is guaranteed by calling _get_deterministic_ordering() with the
        constructed ordering.
        """
        ...
    
    def get_ordering_field_columns(self): # -> dict[Any, Any]:
        """
        Return a dictionary of ordering field column numbers and asc/desc.
        """
        ...
    
    def get_queryset(self, request, exclude_parameters=...):
        ...
    
    def apply_select_related(self, qs):
        ...
    
    def has_related_field_in_list_display(self): # -> bool:
        ...
    
    def url_for_result(self, result): # -> str:
        ...
    


