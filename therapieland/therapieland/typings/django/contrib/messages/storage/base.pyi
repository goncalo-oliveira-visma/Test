"""
This type stub file was generated by pyright.
"""

LEVEL_TAGS = ...
class Message:
    """
    Represent an actual message that can be stored in any of the supported
    storage classes (typically session- or cookie-based) and rendered in a view
    or template.
    """
    def __init__(self, level, message, extra_tags=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def tags(self): # -> str:
        ...
    
    @property
    def level_tag(self): # -> Any:
        ...
    


class BaseStorage:
    """
    This is the base backend for temporary message storage.

    This is not a complete class; to be a usable storage backend, it must be
    subclassed and the two methods ``_get`` and ``_store`` overridden.
    """
    def __init__(self, request, *args, **kwargs) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def update(self, response): # -> None:
        """
        Store all unread messages.

        If the backend has yet to be iterated, store previously stored messages
        again. Otherwise, only store messages added after the last iteration.
        """
        ...
    
    def add(self, level, message, extra_tags=...): # -> None:
        """
        Queue a message to be stored.

        The message is only queued if it contained something and its level is
        not less than the recording level (``self.level``).
        """
        ...
    
    level = ...


