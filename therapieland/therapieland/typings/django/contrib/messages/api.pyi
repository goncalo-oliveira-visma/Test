"""
This type stub file was generated by pyright.
"""

__all__ = ("add_message", "get_messages", "get_level", "set_level", "debug", "info", "success", "warning", "error", "MessageFailure")
class MessageFailure(Exception):
    ...


def add_message(request, level, message, extra_tags=..., fail_silently=...): # -> None:
    """
    Attempt to add a message to the request using the 'messages' app.
    """
    ...

def get_messages(request): # -> Any | list[Any]:
    """
    Return the message storage on the request if it exists, otherwise return
    an empty list.
    """
    ...

def get_level(request): # -> Any:
    """
    Return the minimum level of messages to be recorded.

    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,
    use the ``INFO`` level.
    """
    ...

def set_level(request, level): # -> bool:
    """
    Set the minimum level of messages to be recorded, and return ``True`` if
    the level was recorded successfully.

    If set to ``None``, use the default level (see the get_level() function).
    """
    ...

def debug(request, message, extra_tags=..., fail_silently=...): # -> None:
    """Add a message with the ``DEBUG`` level."""
    ...

def info(request, message, extra_tags=..., fail_silently=...): # -> None:
    """Add a message with the ``INFO`` level."""
    ...

def success(request, message, extra_tags=..., fail_silently=...): # -> None:
    """Add a message with the ``SUCCESS`` level."""
    ...

def warning(request, message, extra_tags=..., fail_silently=...): # -> None:
    """Add a message with the ``WARNING`` level."""
    ...

def error(request, message, extra_tags=..., fail_silently=...): # -> None:
    """Add a message with the ``ERROR`` level."""
    ...

