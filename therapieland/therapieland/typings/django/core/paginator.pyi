"""
This type stub file was generated by pyright.
"""

import collections.abc
from django.utils.functional import cached_property

class UnorderedObjectListWarning(RuntimeWarning):
    ...


class InvalidPage(Exception):
    ...


class PageNotAnInteger(InvalidPage):
    ...


class EmptyPage(InvalidPage):
    ...


class Paginator:
    ELLIPSIS = ...
    default_error_messages = ...
    def __init__(self, object_list, per_page, orphans=..., allow_empty_first_page=..., error_messages=...) -> None:
        ...
    
    def __iter__(self): # -> Generator[Page, Any, None]:
        ...
    
    def validate_number(self, number): # -> int:
        """Validate the given 1-based page number."""
        ...
    
    def get_page(self, number): # -> Page:
        """
        Return a valid page, even if the page argument isn't a number or isn't
        in range.
        """
        ...
    
    def page(self, number): # -> Page:
        """Return a Page object for the given 1-based page number."""
        ...
    
    @cached_property
    def count(self): # -> object | int:
        """Return the total number of objects, across all pages."""
        ...
    
    @cached_property
    def num_pages(self): # -> int:
        """Return the total number of pages."""
        ...
    
    @property
    def page_range(self): # -> range:
        """
        Return a 1-based range of pages for iterating through within
        a template for loop.
        """
        ...
    
    def get_elided_page_range(self, number=..., *, on_each_side=..., on_ends=...): # -> Generator[int | __proxy__, Any, None]:
        """
        Return a 1-based range of pages with some values elided.

        If the page range is larger than a given size, the whole range is not
        provided and a compact form is returned instead, e.g. for a paginator
        with 50 pages, if page 43 were the current page, the output, with the
        default arguments, would be:

            1, 2, …, 40, 41, 42, 43, 44, 45, 46, …, 49, 50.
        """
        ...
    


class Page(collections.abc.Sequence):
    def __init__(self, object_list, number, paginator) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getitem__(self, index): # -> list[Any]:
        ...
    
    def has_next(self):
        ...
    
    def has_previous(self):
        ...
    
    def has_other_pages(self):
        ...
    
    def next_page_number(self):
        ...
    
    def previous_page_number(self):
        ...
    
    def start_index(self): # -> Literal[0]:
        """
        Return the 1-based index of the first object on this page,
        relative to total objects in the paginator.
        """
        ...
    
    def end_index(self):
        """
        Return the 1-based index of the last object on this page,
        relative to total objects found (hits).
        """
        ...
    


