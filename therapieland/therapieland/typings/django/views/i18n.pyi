"""
This type stub file was generated by pyright.
"""

from django.views.generic import View

LANGUAGE_QUERY_PARAMETER = ...
def builtin_template_path(name):
    """
    Return a path to a builtin template.

    Avoid calling this function at the module level or in a class-definition
    because __file__ may not exist, e.g. in frozen environments.
    """
    ...

def set_language(request): # -> HttpResponseRedirect | HttpResponse:
    """
    Redirect to a given URL while setting the chosen language in the session
    (if enabled) and in a cookie. The URL and the language code need to be
    specified in the request parameters.

    Since this view changes how the user will see the rest of the site, it must
    only be accessed as a POST request. If called as a GET request, it will
    redirect to the page in the request (the 'next' parameter) without changing
    any state.
    """
    ...

def get_formats(): # -> dict[str, Any | str | list[Any]]:
    """Return all formats strings required for i18n to work."""
    ...

class JavaScriptCatalog(View):
    """
    Return the selected language catalog as a JavaScript library.

    Receive the list of packages to check for translations in the `packages`
    kwarg either from the extra dictionary passed to the path() function or as
    a plus-sign delimited string from the request. Default is 'django.conf'.

    You can override the gettext domain for this view, but usually you don't
    want to do that as JavaScript messages go to the djangojs domain. This
    might be needed if you deliver your JavaScript source from Django templates.
    """
    domain = ...
    packages = ...
    def get(self, request, *args, **kwargs): # -> HttpResponse:
        ...
    
    def get_paths(self, packages): # -> list[str]:
        ...
    
    def get_plural(self): # -> None:
        ...
    
    def get_catalog(self): # -> dict[Any, Any]:
        ...
    
    def get_context_data(self, **kwargs): # -> dict[str, dict[Any, Any] | dict[str, Any | str | list[Any]] | Any | None]:
        ...
    
    def render_to_response(self, context, **response_kwargs): # -> HttpResponse:
        ...
    


class JSONCatalog(JavaScriptCatalog):
    """
    Return the selected language catalog as a JSON object.

    Receive the same parameters as JavaScriptCatalog and return a response
    with a JSON object of the following format:

        {
            "catalog": {
                # Translations catalog
            },
            "formats": {
                # Language formats for date, time, etc.
            },
            "plural": '...'  # Expression for plural forms, or null.
        }
    """
    def render_to_response(self, context, **response_kwargs): # -> JsonResponse:
        ...
    


