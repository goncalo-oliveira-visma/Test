"""
This type stub file was generated by pyright.
"""

from django.utils.functional import cached_property
from django.views.generic.base import View
from django.views.generic.detail import BaseDetailView, SingleObjectTemplateResponseMixin
from django.views.generic.list import MultipleObjectMixin, MultipleObjectTemplateResponseMixin

class YearMixin:
    """Mixin for views manipulating year-based data."""
    year_format = ...
    year = ...
    def get_year_format(self): # -> str:
        """
        Get a year format string in strptime syntax to be used to parse the
        year from url variables.
        """
        ...
    
    def get_year(self):
        """Return the year for which this view should display data."""
        ...
    
    def get_next_year(self, date): # -> Any | None:
        """Get the next valid year."""
        ...
    
    def get_previous_year(self, date): # -> Any | None:
        """Get the previous valid year."""
        ...
    


class MonthMixin:
    """Mixin for views manipulating month-based data."""
    month_format = ...
    month = ...
    def get_month_format(self): # -> str:
        """
        Get a month format string in strptime syntax to be used to parse the
        month from url variables.
        """
        ...
    
    def get_month(self):
        """Return the month for which this view should display data."""
        ...
    
    def get_next_month(self, date): # -> Any | None:
        """Get the next valid month."""
        ...
    
    def get_previous_month(self, date): # -> Any | None:
        """Get the previous valid month."""
        ...
    


class DayMixin:
    """Mixin for views manipulating day-based data."""
    day_format = ...
    day = ...
    def get_day_format(self): # -> str:
        """
        Get a day format string in strptime syntax to be used to parse the day
        from url variables.
        """
        ...
    
    def get_day(self):
        """Return the day for which this view should display data."""
        ...
    
    def get_next_day(self, date): # -> Any | None:
        """Get the next valid day."""
        ...
    
    def get_previous_day(self, date): # -> Any | None:
        """Get the previous valid day."""
        ...
    


class WeekMixin:
    """Mixin for views manipulating week-based data."""
    week_format = ...
    week = ...
    def get_week_format(self): # -> str:
        """
        Get a week format string in strptime syntax to be used to parse the
        week from url variables.
        """
        ...
    
    def get_week(self):
        """Return the week for which this view should display data."""
        ...
    
    def get_next_week(self, date): # -> Any | None:
        """Get the next valid week."""
        ...
    
    def get_previous_week(self, date): # -> Any | None:
        """Get the previous valid week."""
        ...
    


class DateMixin:
    """Mixin class for views manipulating date-based data."""
    date_field = ...
    allow_future = ...
    def get_date_field(self):
        """Get the name of the date field to be used to filter by."""
        ...
    
    def get_allow_future(self): # -> bool:
        """
        Return `True` if the view should be allowed to display objects from
        the future.
        """
        ...
    
    @cached_property
    def uses_datetime_field(self):
        """
        Return `True` if the date field is a `DateTimeField` and `False`
        if it's a `DateField`.
        """
        ...
    


class BaseDateListView(MultipleObjectMixin, DateMixin, View):
    """Abstract base class for date-based views displaying a list of objects."""
    allow_empty = ...
    date_list_period = ...
    def get(self, request, *args, **kwargs):
        ...
    
    def get_dated_items(self):
        """Obtain the list of dates and items."""
        ...
    
    def get_ordering(self):
        """
        Return the field or fields to use for ordering the queryset; use the
        date field by default.
        """
        ...
    
    def get_dated_queryset(self, **lookup):
        """
        Get a queryset properly filtered according to `allow_future` and any
        extra lookup kwargs.
        """
        ...
    
    def get_date_list_period(self): # -> str:
        """
        Get the aggregation period for the list of dates: 'year', 'month', or
        'day'.
        """
        ...
    
    def get_date_list(self, queryset, date_type=..., ordering=...):
        """
        Get a date list by calling `queryset.dates/datetimes()`, checking
        along the way for empty lists that aren't allowed.
        """
        ...
    


class BaseArchiveIndexView(BaseDateListView):
    """
    Base class for archives of date-based items. Requires a response mixin.
    """
    context_object_name = ...
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    


class ArchiveIndexView(MultipleObjectTemplateResponseMixin, BaseArchiveIndexView):
    """Top-level archive of date-based items."""
    template_name_suffix = ...


class BaseYearArchiveView(YearMixin, BaseDateListView):
    """List of objects published in a given year."""
    date_list_period = ...
    make_object_list = ...
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    
    def get_make_object_list(self): # -> bool:
        """
        Return `True` if this view should contain the full list of objects in
        the given year.
        """
        ...
    


class YearArchiveView(MultipleObjectTemplateResponseMixin, BaseYearArchiveView):
    """List of objects published in a given year."""
    template_name_suffix = ...


class BaseMonthArchiveView(YearMixin, MonthMixin, BaseDateListView):
    """List of objects published in a given month."""
    date_list_period = ...
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    


class MonthArchiveView(MultipleObjectTemplateResponseMixin, BaseMonthArchiveView):
    """List of objects published in a given month."""
    template_name_suffix = ...


class BaseWeekArchiveView(YearMixin, WeekMixin, BaseDateListView):
    """List of objects published in a given week."""
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    


class WeekArchiveView(MultipleObjectTemplateResponseMixin, BaseWeekArchiveView):
    """List of objects published in a given week."""
    template_name_suffix = ...


class BaseDayArchiveView(YearMixin, MonthMixin, DayMixin, BaseDateListView):
    """List of objects published on a given day."""
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    


class DayArchiveView(MultipleObjectTemplateResponseMixin, BaseDayArchiveView):
    """List of objects published on a given day."""
    template_name_suffix = ...


class BaseTodayArchiveView(BaseDayArchiveView):
    """List of objects published today."""
    def get_dated_items(self):
        """Return (date_list, items, extra_context) for this request."""
        ...
    


class TodayArchiveView(MultipleObjectTemplateResponseMixin, BaseTodayArchiveView):
    """List of objects published today."""
    template_name_suffix = ...


class BaseDateDetailView(YearMixin, MonthMixin, DayMixin, DateMixin, BaseDetailView):
    """
    Detail view of a single object on a single date; this differs from the
    standard DetailView by accepting a year/month/day in the URL.
    """
    def get_object(self, queryset=...):
        """Get the object this request displays."""
        ...
    


class DateDetailView(SingleObjectTemplateResponseMixin, BaseDateDetailView):
    """
    Detail view of a single object on a single date; this differs from the
    standard DetailView by accepting a year/month/day in the URL.
    """
    template_name_suffix = ...


def timezone_today(): # -> _Date:
    """Return the current date in the current time zone."""
    ...

