"""
This type stub file was generated by pyright.
"""

from django.core.paginator import Paginator
from django.views.generic.base import ContextMixin, TemplateResponseMixin, View

class MultipleObjectMixin(ContextMixin):
    """A mixin for views manipulating multiple objects."""
    allow_empty = ...
    queryset = ...
    model = ...
    paginate_by = ...
    paginate_orphans = ...
    context_object_name = ...
    paginator_class = Paginator
    page_kwarg = ...
    ordering = ...
    def get_queryset(self):
        """
        Return the list of items for this view.

        The return value must be an iterable and may be an instance of
        `QuerySet` in which case `QuerySet` specific behavior will be enabled.
        """
        ...
    
    def get_ordering(self): # -> None:
        """Return the field or fields to use for ordering the queryset."""
        ...
    
    def paginate_queryset(self, queryset, page_size): # -> tuple[paginator_class, Page, Any | list[Any], Any]:
        """Paginate the queryset, if needed."""
        ...
    
    def get_paginate_by(self, queryset): # -> None:
        """
        Get the number of items to paginate by, or ``None`` for no pagination.
        """
        ...
    
    def get_paginator(self, queryset, per_page, orphans=..., allow_empty_first_page=..., **kwargs): # -> paginator_class:
        """Return an instance of the paginator for this view."""
        ...
    
    def get_paginate_orphans(self): # -> int:
        """
        Return the maximum number of orphans extend the last page by when
        paginating.
        """
        ...
    
    def get_allow_empty(self): # -> bool:
        """
        Return ``True`` if the view should display empty lists and ``False``
        if a 404 should be raised instead.
        """
        ...
    
    def get_context_object_name(self, object_list): # -> None:
        """Get the name of the item to be used in the context."""
        ...
    
    def get_context_data(self, *, object_list=..., **kwargs): # -> dict[str, Any]:
        """Get the context for this view."""
        ...
    


class BaseListView(MultipleObjectMixin, View):
    """A base view for displaying a list of objects."""
    def get(self, request, *args, **kwargs):
        ...
    


class MultipleObjectTemplateResponseMixin(TemplateResponseMixin):
    """Mixin for responding with a template and list of objects."""
    template_name_suffix = ...
    def get_template_names(self): # -> list[Never]:
        """
        Return a list of template names to be used for the request. Must return
        a list. May not be called if render_to_response is overridden.
        """
        ...
    


class ListView(MultipleObjectTemplateResponseMixin, BaseListView):
    """
    Render some list of objects, set by `self.model` or `self.queryset`.
    `self.queryset` can actually be any iterable of items, not just a queryset.
    """
    ...


